<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
string DateType = "System.DateTime";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

@{
	ViewBag._Active = "<#= ViewName#>";
	ViewBag._Panel = "Home";
}


<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>


<br />
<br />
<div class=" segment">
    <h1 class="ui header">
        <img src="~/Content/images/logo1.png">
        <div class="content">
            Módulo  de Edición de <#= ViewDataTypeShortName #>
            <div class="sub header">
                <div class="ui breadcrumb">
                    <a class="section"  href="@Url.Action("home","Home")">Inicio</a>
                    <div class="divider"> / </div>
                    <a class="section" href="@Url.Action("Index")">Listar</a>
                    <div class="divider"> / </div>
                    <div class="active section" style="text-transform:lowercase">Edición de <#= ViewDataTypeShortName #></div>
                </div>
            </div>
        </div>

    </h1>
    <div class="ui hidden divider"></div>

</div>

<h4 class="ui horizontal divider header">
    <button class="ui  large red submit button">
        <i class="edit icon"></i>
        Editar <#= ViewDataTypeShortName #>
    </button>

</h4>

<div class="ui grid">
    <div class="one wide column"></div>
    <div class="fourteen wide column">
        <div class="ui segments">
            <div class="ui teal segment">
				@using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "ui large form", autofocus = "" })) 
				{
					@Html.AntiForgeryToken()
			<# 
				if (isControlHtmlAttributesSupported) {
			#>
					@Html.ValidationSummary(true, "", new { @class = "text-danger" })
			<#        
				} else {
			#>
					@Html.ValidationSummary(true)
			<#      
				}
			#>
				<#
				foreach (PropertyMetadata property in ModelMetadata.Properties) {
					if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation && property.PropertyName != "CreatedBy" && property.PropertyName != "UpdatedBy" && property.PropertyName != "CreatedAt" &&  property.PropertyName != "UpdatedAt"
					&&  property.PropertyName != "DeletedAt") {

						// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
						if (property.IsPrimaryKey && IsPropertyGuid(property)) {
							continue;
						}

				#>
						<div class="field">
				<#
						if (property.IsForeignKey) {
				#>
							@Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "" })
				<#
						} else {
				#>
							@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "" })
				<#
						}
				#>
							
					<#
							bool isCheckbox = property.TypeName.Equals(boolType);
							bool isDateTime = property.TypeName.Equals(DateType);
							if (property.IsForeignKey) {
					#>
				<# 
							if (isControlHtmlAttributesSupported) {
				#>
								@Html.DropDownList("<#= property.PropertyName #>", null , "Sin Seleccionar", htmlAttributes: new { @class = "ui search selection dropdown" })
				<#
							} else {
				#>
								@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
				<#
							}
				#>
				<#
						} else  if (isControlHtmlAttributesSupported) {
							if (isCheckbox) {
				#>
								
				<#
								PushIndent("    ");
				#>
							<select name="Status" class="ui search selection dropdown">
								<option value="true" @if (Model.<#= property.PropertyName #> == true) { Write("Selected"); }>Activo</option>
								<option value="false" @if (Model.<#= property.PropertyName #> == false) { Write("Selected"); }>Inactivo</option>
							</select>
				<#	} else if (property.IsEnum && !property.IsEnumFlags) {		#>
								@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "ui search selection dropdown" })
				<#	} else if (isDateTime) {		#>


<div class="ui mini icon input">
	@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "datepicker",type="text" } })
	<i class="calendar alternate outline icon"></i>
</div>

					
				<#	} else {  #>
<div class="ui mini icon input">
	@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "" } })
	<i class="keyboard outline outline icon"></i>
</div>

				<#	} #>

				<#	} else {	 #>

<div class="ui mini icon input">
	@Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "" } })
	<i class="keyboard outline outline icon"></i>
</div>



				<#	} #>
				<# 
						if (isControlHtmlAttributesSupported) {
				#>
								@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "ui error message" })
				<#        
						} else {
				#>
								@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
				<#      
						}
				#>
				<#
						if (isCheckbox && isControlHtmlAttributesSupported) {
							PopIndent();
				#>
						
				<#
						}
				#>
							</div>

				<#
					}
				}
				#>

						<div class="field">
							<br />
							<input type="submit" value="Guardar" class="ui  large red submit button" />
								@Html.ActionLink("Regresar", "Index",null,new { @class = "ui button" })
						</div>
				}
            </div>
        </div>
    </div>
</div>



<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>